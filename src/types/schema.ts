export interface components {
  schemas: {
      /**
       * @description A HTTP Error response
       * @example {
       *       "status": false,
       *       "error": {
       *         "name": "Unauthorized",
       *         "statusCode": 401,
       *         "message": "Missing authorization header.",
       *         "type": "Unauthorized"
       *       }
       *     }
       */
      BaseErrorResponse: {
          status?: boolean;
          error?: {
              name?: string;
              statusCode?: number;
              message?: string;
              type?: string;
          };
      };
      BaseResource: {
          /**
           * @description The unique identifier for the resource. It can be provided at creation, otherwise it will be generated by the api.
           * @example 046ae7f2-a3eb-4c4f-ac92-16d7abc56c7e
           */
          uuid?: string;
          /**
           * Format: date-time
           * @description The date (and time) at which the resource was created.
           */
          createdAt?: string;
          /**
           * Format: date-time
           * @description The date (and time) at which the resource was updated last time.
           */
          updatedAt?: string;
          /**
           * @description A map of strings with custom content
           * @example {
           *       "key": "value",
           *       "hello": "world"
           *     }
           */
          metadata?: {
              [key: string]: string;
          };
      };
      LocationPoint: {
          /** @enum {string} */
          type: 'point';
          coordinates: components['schemas']['CoordinatesPoint'];
      };
      CoordinatesPoint: number[];
      LocationPolygon: {
          /** @enum {string} */
          type: 'polygon';
          coordinates: components['schemas']['CoordinatesPoint'][];
      };
      Project: components['schemas']['BaseResource'] & {
          /**
           * @description A meaningful name for the project.
           * @example My IoT project
           */
          name: string;
          /**
           * @description A description of the project
           * @example In this project we collect data from several energy meters
           */
          description?: string;
      };
      Application: components['schemas']['BaseResource'] & {
          /**
           * @description The project this node belongs to.
           * @example 63d96205-0699-4498-9c07-2db5118d090d
           */
          projectId?: string;
          /**
           * @description A meaningful name for the application.
           * @example Mobile Application for ACME IoT Project
           */
          name: string;
          /**
           * @description A description of the application
           * @example With this application we display realtime IoT data .
           */
          description?: string;
          /**
           * @description Connected if the application is connected to the MQTT broker. Disconnected otherwise.
           * @example connected
           * @enum {string}
           */
          connectivityStatus?: 'connected' | 'disconnected';
      };
      Asset: components['schemas']['BaseResource'] & {
          /**
           * @description The project this resource belongs to.
           * @example 63d96205-0699-4498-9c07-2db5118d090d
           */
          projectId: string;
          /**
           * @description A meaningful name for the resource.
           * @example Mobile Application for ACME IoT Project
           */
          name: string;
          /**
           * @description A description of the resource
           * @example With this application we display realtime IoT data .
           */
          description?: string;
          /**
           * @description The uuid of the asset type instance, which holds a description of this kind of assets.
           * @example 63d96205-0699-4498-9c07-2db5118d090d
           */
          assetTypeId?: string;
          /**
           * @description The id of the plant the asset belongs to. Optional.
           * @example p1234
           */
          plantId?: string;
          /**
           * @description The id of the parent asset. Optional.
           * @example p1234
           */
          parentId?: string;
          /**
           * @description An array of tags. Alphanumeric characters only.
           * @default []
           */
          tags: string[];
      };
      AnomalyConfigurationSeverity: {
          /** @enum {number} */
          level: 1 | 2 | 3 | 4 | 5;
          threshold: string;
          via?: ('websocket' | 'email')[];
      };
      AnomalyConfiguration: components['schemas']['BaseResource'] & {
          /** @description Anomaly category */
          category: string;
          /** @description Anomaly subcategory */
          subCategory: string;
          /** @default true */
          enabled: boolean;
          name: string;
          description?: string;
          checkContext: string;
          checkFunction: string;
          severity: components['schemas']['AnomalyConfigurationSeverity'][];
      };
      AnomalySeverity: {
          /** @enum {number} */
          level: 1 | 2 | 3 | 4 | 5;
          /** Format: date-time */
          startedAt: string;
          /** Format: date-time */
          endedAt?: string;
          /** @description Duration in milliseconds of the anomaly */
          duration?: number;
      };
      Anomaly: components['schemas']['BaseResource'] & {
          /** Format: date-time */
          startedAt?: string;
          /** Format: date-time */
          endedAt?: string;
          /** @description Duration in milliseconds of the anomaly */
          duration?: number;
          /** @description Uuid of the anomalyConfiguration */
          configurationId?: string;
          sources?: string[];
          severity?: components['schemas']['AnomalySeverity'][];
      };
      Device: components['schemas']['BaseResource'] & {
          /**
           * @description The project this node belongs to.
           * @example 63d96205-0699-4498-9c07-2db5118d090d
           */
          projectId: string;
          /**
           * @description A distinguishable name for the node.
           * @example Node-1
           */
          name: string;
          /**
           * @description A description of the node
           * @example This is the gateway for the 4th floor of the building
           */
          description?: string;
          /**
           * @description The node (datalogger, gateway, etc) connected to this device
           * @example 63d96205-0699-4498-9c07-2db5118d090d
           */
          nodeId?: string;
          /**
           * @description The id of the plant in which this device is installed, if the device also has a nodeId, the node and the device must have the same plantId
           * @example 63d96205-0699-4498-9c07-2db5118d090d
           */
          plantId?: string;
          location?: components['schemas']['LocationPoint'];
          /**
           * @description The uuid of the deviceType resource
           * @example acme.energy-meter-500
           */
          deviceTypeId?: string;
          /** @description The ISO8601 date of the last activity, downlink or uplink */
          lastActivityAt?: string;
          /** @description The ISO8601 date of the last activity, downlink or uplink */
          lastCommunicationAt?: string;
          /**
           * @description An array of tags. Alphanumeric characters only.
           * @default []
           */
          tags: string[];
      };
      AssetType: components['schemas']['BaseResource'] & {
          /**
           * @description The project this node belongs to.
           * @example 63d96205-0699-4498-9c07-2db5118d090d
           */
          projectId: string;
          /**
           * @description A distinguishable name for the asset type.
           * @example ACME dish washer
           */
          name: string;
          /**
           * @description Name of the asset manufacturer.
           * @example ACME LTD
           */
          manufacturer?: string;
          /**
           * @description A description of the asset type
           * @example This is an asset with great set of features.
           */
          description?: string;
          /**
           * @description The broad category of device, like Dish Washer, Hair Drier etc..
           * @example Dish Washer
           */
          category?: string;
      };
      DeviceTypeProperty: {
          /**
           * @description Unit of measurement
           * @example kW
           */
          uom: string;
          /**
           * @description A description of the property
           * @example Active power absorbed by the device.
           */
          description?: string;
          /**
           * @description A label for the property
           * @example Absorbed Active Power [kW]
           */
          displayName: string;
          /**
           * @description A type for the values of this property
           * @default number
           * @example number
           * @enum {string}
           */
          type: 'boolean' | 'number' | 'integer' | 'double' | 'string';
          /**
           * @description Defines which kind of aggregations should be done on the raw data corresponding to this property.
           * @default []
           */
          aggregations: string[];
      };
      Command: components['schemas']['BaseResource'] & {
          /**
           * @description The name of the command
           * @example reboot
           */
          name?: string;
          /** @description The uuid of the device */
          deviceId?: string;
          /** @example {
           *       "rebootAfterSeconds": 8
           *     } */
          parameters?: Record<string, never>;
          /**
           * @description Describes the status of a command. Can be used to model its lifecycle. Devices can update this resource after receiving the command from the MQTT broker.
           * @default pending
           * @enum {string}
           */
          status: 'pending' | 'received' | 'completed' | 'failed';
      };
      DeviceType: components['schemas']['BaseResource'] & {
          /**
           * @description A distinguishable name for the device type.
           * @example ACME Energy Meter 500
           */
          name: string;
          /**
           * @description Name of the device manufacturer.
           * @example ACME LTD
           */
          manufacturer?: string;
          /**
           * @description Name of the device model.
           * @example ACME Meter 500
           */
          model?: string;
          /**
           * @description A description of the device type
           * @example This is an energy meter with great set of features.
           */
          description?: string;
          /**
           * @description The broad category of device, like Energy Meter, Inverter etc..
           * @example Energy Meter
           */
          category?: string;
          properties?: {
              [key: string]: components['schemas']['DeviceTypeProperty'];
          };
          /** @description Name of an encoder function. */
          encoder?: string;
          /** @description Name of a decoder function. */
          decoder?: string;
          /** @description Array of possible firmware versions */
          firmwareVersions?: unknown[];
      };
      NodeType: components['schemas']['BaseResource'] & {
          /**
           * @description A distinguishable name for the node type.
           * @example ACME Super Gateway
           */
          name: string;
          /**
           * @description Name of the manufacturer.
           * @example ACME LTD
           */
          manufacturer?: string;
          /**
           * @description Name of the model.
           * @example Super Gateway
           */
          model?: string;
          /**
           * @description A description of the node type
           * @example This is an energy meter with great set of features.
           */
          description?: string;
          /** @description Name of an encoder function. */
          encoder?: string;
          /** @description Name of a decoder function. */
          decoder?: string;
          /** @description Array of possible firmware versions */
          firmwareVersions?: unknown[];
      };
      Node: components['schemas']['BaseResource'] & {
          /**
           * @description The project this node belongs to.
           * @example 63d96205-0699-4498-9c07-2db5118d090d
           */
          projectId: string;
          /**
           * @description The id of the plant in which this device is installed, if the device also has a nodeId, the node and the device must have the same plantId
           * @example 63d96205-0699-4498-9c07-2db5118d090d
           */
          plantId?: string;
          /**
           * @description A distinguishable name for the node.
           * @example Node-1
           */
          name: string;
          /**
           * @description A description of the node
           * @example This is the gateway for the 4th floor of the building
           */
          description?: string;
          /**
           * @description Connected if the node is connected to the MQTT broker. Disconnected otherwise.
           * @example connected
           * @enum {string}
           */
          connectivityStatus?: 'connected' | 'disconnected';
          location?: components['schemas']['LocationPoint'];
          /**
           * @description An array of tags. Alphanumeric characters only.
           * @default []
           */
          tags: string[];
      };
      Deployment: components['schemas']['BaseResource'] & {
          /**
           * @description The project this node belongs to.
           * @example 63d96205-0699-4498-9c07-2db5118d090d
           */
          projectId: string;
          /**
           * @description The node where the deployment must be applied.
           * @example f0a46def-cfc8-4aab-b694-4b5634d72de1
           */
          nodeId: string;
          /** @description A JSON description of the deployment compliant to the Compose specification. */
          spec: {
              /** @example 3 */
              version?: string;
              volumes?: {
                  /** @example null */
                  mongodata?: string;
              };
              services?: {
                  mongodb?: {
                      /** @example unless-stopped */
                      restart?: string;
                      /** @example mongo */
                      image?: string;
                      volumes?: string[];
                      networks?: string[];
                  };
                  app?: {
                      environment?: {
                          /** @example mongodb://mongodb:27017/app */
                          MONGODB_URI?: string;
                          /** @example production */
                          NODE_ENV?: string;
                      };
                      /** @example unless-stopped */
                      restart?: string;
                      /** @example registry.gitlab.com/apio-edge-network/edge-api */
                      image?: string;
                      ports?: string[];
                      depends_on?: string[];
                  };
              };
          };
      };
      /** @description A plant is a logical group of project resources and typically maps to a location where project resources are located. */
      Plant: components['schemas']['BaseResource'] & {
          /**
           * @description The project this node belongs to.
           * @example 63d96205-0699-4498-9c07-2db5118d090d
           */
          projectId: string;
          /**
           * @description A distinguishable name for the plant.
           * @example Plant-1
           */
          name: string;
          location?: components['schemas']['LocationPolygon'];
          /** @description A description of the plant */
          description?: string;
          /**
           * @description An array of tags. Alphanumeric characters only.
           * @default []
           */
          tags: string[];
      };
      Setting: {
          /**
           * @description Reference to Project UUID.
           * @example ffe78f86-56a0-405b-816a-b3b04021b844
           */
          projectId?: string;
          /**
           * @description Unique id of the resource
           * @example ffe78f86-56a0-405b-816a-b3b04021b844
           */
          uuid?: string;
          /**
           * @description Reference to Account UUID.
           * @example ffe78f86-56a0-405b-816a-b3b04021b844
           */
          accountId?: string;
          /**
           * @description Name of the setting
           * @example ENABLE_FEATURE_X
           */
          name?: string;
          /**
           * @description A map of values of the setting
           * @example {
           *       "key": "value"
           *     }
           */
          data?: Record<string, never>;
      };
      CreateAPIKeys: {
          /**
           * @description API Key name.
           * @example My API Key
           */
          name: string;
          /**
           * @description API Key description.
           * @example This API Key let service X to authenticate
           */
          description?: string;
          /**
           * Format: ISO8601
           * @description API Key expiration date
           * @example 2042-01-01T00:00:00.000Z
           */
          expire?: string;
          permissions: string[];
      };
      APIKeys: {
          /**
           * @description Reference to Project UUID.
           * @example ffe78f86-56a0-405b-816a-b3b04021b844
           */
          projectId?: string;
          /**
           * @description API Key name.
           * @example My API Key
           */
          name?: string;
          /**
           * @description The API Key value.
           * @example zaCELgL.0imfnc8mVLWwsAawjYr4Rx-Af50DDqtlx
           */
          value?: string;
          /**
           * @description API Key description.
           * @example This API Key let service X to authenticate
           */
          description?: string;
          /**
           * Format: ISO8601
           * @description API Key expiration date
           * @example 2042-01-01T00:00:00.000Z
           */
          expire?: string;
          permissions?: string[];
      };
      Accounts: {
          /**
           * @description Account status.
           * @example active
           * @enum {string}
           */
          status?: 'active' | 'inactive' | 'deleted';
          /**
           * @description Account full name.
           * @example Aulo Agerio
           */
          fullName?: string;
          /**
           * @description Login password.
           * @example v53YyWWRSKn2fEak
           */
          password?: string;
          /**
           * @description Login email.
           * @example cxili_9k@technt.org
           */
          email?: string;
          /**
           * @description Whether or not the account must reset the password.
           * @example false
           */
          mustResetPassword?: boolean;
      };
      Roles: {
          /**
           * @description Unique id of the resource
           * @example ffe78f86-56a0-405b-816a-b3b04021b844
           */
          uuid?: string;
          /**
           * @description Reference to Project UUID.
           * @example ffe78f86-56a0-405b-816a-b3b04021b844
           */
          projectId?: string;
          /**
           * @description Role name.
           * @example My Role
           */
          name?: string;
          /**
           * @description Role description.
           * @example This Role let actions X, Y and Z to be performed.
           */
          description?: string;
          permissions?: string[];
      };
      ACLRules: {
          /**
           * @description Unique id of the resource
           * @example ffe78f86-56a0-405b-816a-b3b04021b844
           */
          uuid?: string;
          /**
           * @description Reference to Project UUID.
           * @example ffe78f86-56a0-405b-816a-b3b04021b844
           */
          projectId?: string;
          /**
           * @description Reference to Role UUID.
           * @example ffe78f86-56a0-405b-816a-b3b04021b844
           */
          roleId?: string;
          /**
           * @description Reference to Account UUID.
           * @example ffe78f86-56a0-405b-816a-b3b04021b844
           */
          accountId?: string;
      };
      Groups: components['schemas']['BaseResource'] & {
          /**
           * @description Reference to Project UUID.
           * @example ffe78f86-56a0-405b-816a-b3b04021b844
           */
          projectId?: string;
          /**
           * @description Name of the group
           * @example My Group
           */
          name?: string;
          /**
           * @description Description of the group
           * @example My Group Description
           */
          description?: string;
          /**
           * @description Array of resources assigned to this group
           * @example [
           *       "/projects/myProject/devices/myDeviceId"
           *     ]
           */
          resources?: string[];
      };
      Groupmemberships: components['schemas']['BaseResource'] & {
          /**
           * @description Reference to Project UUID.
           * @example ffe78f86-56a0-405b-816a-b3b04021b844
           */
          projectId?: string;
          /**
           * @description Uuid of the group
           * @example ffe78f86-56a0-405b-816a-b3b04021b844
           */
          groupId?: string;
          /**
           * @description Uuid of the account
           * @example ffe78f86-56a0-405b-816a-b3b04021b844
           */
          accountId?: string;
      };
      Tokens: {
          /**
           * @description The Token value.
           * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
           */
          value?: string;
          /**
           * @description Reference to Account UUID.
           * @example ffe78f86-56a0-405b-816a-b3b04021b844
           */
          accountId?: string;
      };
      AccountActivationToken: {
          /**
           * @description The email of the account the token is referred to.
           * @example cxili_9k@technt.org
           */
          email?: string;
          /**
           * @description The Token value.
           * @example 57c6db3ffd9f68e8897b5f11f900bddf
           */
          token?: string;
      };
      /** @example {
       *       "name": "temperature",
       *       "value": 19.7,
       *       "time": "2023-01-15T00:00:00.000Z",
       *       "deviceId": "5d15b4ed-64c1-4899-bf22-1684450d76b0"
       *     } */
      Data: {
          /** @description The name of the metric. */
          name?: string;
          /** @description The value of the metric. */
          value?: number;
          /** @description Project uuid */
          projectId?: string;
          /** @description Device uuid */
          deviceId?: string;
          /** @description ISO 8601 Timestamp */
          time?: string;
      };
      TimeseriesQuery: {
          query: {
              deviceId?: string;
              /**
               * @description URIs of the timeseries.
               * @example [
               *       "devices/12345/power",
               *       "devices/12345/impenergy/delta/hourly"
               *     ]
               */
              series?: string[];
              name?: string[];
              timeFrom?: string;
              timeTo?: string;
          };
          pipeline?: {
              add?: number;
              mul?: number;
              resample?: {
                  interval: number;
                  operation: string;
              };
              aggregate?: {
                  operation: string;
                  columns: string[];
                  output: string;
              }[];
              project?: {
                  columns?: string[];
              };
          }[];
      }[];
  };
  responses: {
      /** @description Bad input was provided. Response might contain more information about what was wrong */
      BadRequestResponse: {
          headers: {
              [name: string]: unknown;
          };
          content?: never;
      };
      /** @description The resource could not be found */
      NotFoundResponse: {
          headers: {
              [name: string]: unknown;
          };
          content?: never;
      };
      /** @description Credentials were accepted and an authentication token is provided in the response */
      AuthenticationSuccessfulResponse: {
          headers: {
              [name: string]: unknown;
          };
          content?: never;
      };
      /** @description Everything fine */
      OKResponse: {
          headers: {
              [name: string]: unknown;
          };
          content?: never;
      };
      /** @description Invalid credentials */
      UnauthorizedResponse: {
          headers: {
              [name: string]: unknown;
          };
          content?: never;
      };
      /** @description Wrong activation code */
      UnauthorizedActivationResponse: {
          headers: {
              [name: string]: unknown;
          };
          content?: never;
      };
      /** @description Account has not the permission to complete the operation */
      ForbiddenResponse: {
          headers: {
              [name: string]: unknown;
          };
          content?: never;
      };
      /** @description Account as already been activated */
      ConflictResponse: {
          headers: {
              [name: string]: unknown;
          };
          content?: never;
      };
  };
  parameters: {
      /** @description pass an optional search json object for filtering results */
      filterParameter: string;
      /** @description number of records to skip for pagination */
      skipParameter: number;
      /** @description maximum number of records to return */
      limitParameter: number;
      /** @description The unique identifier of the requested resource */
      uuid: string;
      /** @description The unique identifier of the project */
      projectId: string;
      /** @description The unique identifier of the node */
      nodeId: string;
      /** @description The unique identifier of the deployment */
      deploymentId: string;
      /**
       * @description The Bearer token
       * @example Bearer W5wwSsJwJwco3tZ0
       */
      bearerAuthHeader: string;
      /**
       * @description The API Key
       * @example APIKey zaCELgL.0imfnc8mVLWwsAawjYr4Rx-Af50DDqtlx
       */
      apiKeyAuthHeader: string;
      /** @description The unique identifier of the API Key */
      apikeyId: string;
      /** @description The unique identifier of the account */
      accountId: string;
      /** @description The unique identifier of the role */
      roleId: string;
      /** @description The unique identifier of the ACL Rule */
      aclruleId: string;
      /** @description The metric name, for example `power` or `current` */
      name: string;
      /** @description The id of the device */
      deviceId: string;
      /** @description Limit the time frame for the query, to be used with `timeTo`. The default timewindow is the last hour */
      timeFrom: string | number;
      /** @description Limit the time frame for the query, to be used with `timeFrom`. The default timewindow is the last hour */
      timeTo: string | number;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}
