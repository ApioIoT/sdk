export const LocationPointTypeEnum = {
  Point: 'point'
} as const

export type LocationPointTypeEnum = typeof LocationPointTypeEnum[keyof typeof LocationPointTypeEnum];

export interface LocationPoint {
  /**
   * 
   * @type {string}
   * @memberof LocationPoint
   */
  type: LocationPointTypeEnum;
  /**
   * 
   * @type {Array<number>}
   * @memberof LocationPoint
   */
  coordinates: Array<number>;
}

export interface Asset {
  /**
   * The unique identifier for the resource. It can be provided at creation, otherwise it will be generated by the api.
   * @type {string}
   * @memberof Asset
   */
  uuid?: string;
  /**
   * The date (and time) at which the resource was created.
   * @type {Date}
   * @memberof Asset
   */
  createdAt?: Date;
  /**
   * The date (and time) at which the resource was updated last time.
   * @type {Date}
   * @memberof Asset
   */
  updatedAt?: Date;
  /**
   * A map of strings with custom content
   * @type {{ [key: string]: string; }}
   * @memberof Asset
   */
  metadata?: { [key: string]: string; };
  /**
   * The project this resource belongs to.
   * @type {string}
   * @memberof Assetqq
   */
  projectId: string;
  /**
   * A meaningful name for the resource.
   * @type {string}
   * @memberof Asset
   */
  name: string;
  /**
   * A description of the resource
   * @type {string}
   * @memberof Asset
   */
  description?: string;
  /**
   * The uuid of the asset type instance, which holds a description of this kind of assets.
   * @type {string}
   * @memberof Asset
   */
  assetTypeId?: string;
  /**
   * The id of the plant the asset belongs to. Optional.
   * @type {string}
   * @memberof Asset
   */
  plantId?: string;
  /**
   * The id of the parent asset. Optional.
   * @type {string}
   * @memberof Asset
   */
  parentId?: string;
  /**
   * An array of tags. Alphanumeric characters only.
   * @type {Array<string>}
   * @memberof Asset
   */
  tags?: Array<string>;
}

export interface Device {
  /**
   * The unique identifier for the resource. It can be provided at creation, otherwise it will be generated by the api.
   * @type {string}
   * @memberof Device
   */
  uuid?: string;
  /**
   * The date (and time) at which the resource was created.
   * @type {Date}
   * @memberof Device
   */
  createdAt?: Date;
  /**
   * The date (and time) at which the resource was updated last time.
   * @type {Date}
   * @memberof Device
   */
  updatedAt?: Date;
  /**
   * A map of strings with custom content
   * @type {{ [key: string]: string; }}
   * @memberof Device
   */
  metadata?: { [key: string]: string; };
  /**
   * The project this node belongs to.
   * @type {string}
   * @memberof Device
   */
  projectId: string;
  /**
   * A distinguishable name for the node.
   * @type {string}
   * @memberof Device
   */
  name: string;
  /**
   * A description of the node
   * @type {string}
   * @memberof Device
   */
  description?: string;
  /**
   * The node (datalogger, gateway, etc) connected to this device
   * @type {string}
   * @memberof Device
   */
  nodeId?: string;
  /**
   * The id of the plant in which this device is installed, if the device also has a nodeId, the node and the device must have the same plantId
   * @type {string}
   * @memberof Device
   */
  plantId?: string;
  /**
   * 
   * @type {LocationPoint}
   * @memberof Device
   */
  location?: LocationPoint;
  /**
   * The uuid of the deviceType resource
   * @type {string}
   * @memberof Device
   */
  deviceTypeId?: string;
  /**
   * The ISO8601 date of the last activity, downlink or uplink
   * @type {string}
   * @memberof Device
   */
  lastActivityAt?: string;
  /**
   * The ISO8601 date of the last activity, downlink or uplink
   * @type {string}
   * @memberof Device
   */
  lastCommunicationAt?: string;
  /**
   * An array of tags. Alphanumeric characters only.
   * @type {Array<string>}
   * @memberof Device
   */
  tags?: Array<string>;
}

export const NodeConnectivityStatusEnum = {
  Connected: 'connected',
  Disconnected: 'disconnected'
} as const
export type NodeConnectivityStatusEnum = typeof NodeConnectivityStatusEnum[keyof typeof NodeConnectivityStatusEnum];

export interface Node {
  /**
   * The unique identifier for the resource. It can be provided at creation, otherwise it will be generated by the api.
   * @type {string}
   * @memberof Node
   */
  uuid?: string;
  /**
   * The date (and time) at which the resource was created.
   * @type {Date}
   * @memberof Node
   */
  createdAt?: Date;
  /**
   * The date (and time) at which the resource was updated last time.
   * @type {Date}
   * @memberof Node
   */
  updatedAt?: Date;
  /**
   * A map of strings with custom content
   * @type {{ [key: string]: string; }}
   * @memberof Node
   */
  metadata?: { [key: string]: string; };
  /**
   * The project this node belongs to.
   * @type {string}
   * @memberof Node
   */
  projectId: string;
  /**
   * The id of the plant in which this device is installed, if the device also has a nodeId, the node and the device must have the same plantId
   * @type {string}
   * @memberof Node
   */
  plantId?: string;
  /**
   * A distinguishable name for the node.
   * @type {string}
   * @memberof Node
   */
  name: string;
  /**
   * A description of the node
   * @type {string}
   * @memberof Node
   */
  description?: string;
  /**
   * Connected if the node is connected to the MQTT broker. Disconnected otherwise.
   * @type {string}
   * @memberof Node
   */
  connectivityStatus?: NodeConnectivityStatusEnum;
  /**
   * 
   * @type {LocationPoint}
   * @memberof Node
   */
  location?: LocationPoint;
  /**
   * An array of tags. Alphanumeric characters only.
   * @type {Array<string>}
   * @memberof Node
   */
  tags?: Array<string>;
}

export const LocationPolygonTypeEnum = {
  Polygon: 'polygon'
} as const
export type LocationPolygonTypeEnum = typeof LocationPolygonTypeEnum[keyof typeof LocationPolygonTypeEnum];

export interface LocationPolygon {
  /**
   * 
   * @type {string}
   * @memberof LocationPolygon
   */
  type: LocationPolygonTypeEnum;
  /**
   * 
   * @type {Array<Array<number>>}
   * @memberof LocationPolygon
   */
  coordinates: Array<Array<number>>;
}

export interface Plant {
  /**
   * The unique identifier for the resource. It can be provided at creation, otherwise it will be generated by the api.
   * @type {string}
   * @memberof Plant
   */
  uuid?: string;
  /**
   * The date (and time) at which the resource was created.
   * @type {Date}
   * @memberof Plant
   */
  createdAt?: Date;
  /**
   * The date (and time) at which the resource was updated last time.
   * @type {Date}
   * @memberof Plant
   */
  updatedAt?: Date;
  /**
   * A map of strings with custom content
   * @type {{ [key: string]: string; }}
   * @memberof Plant
   */
  metadata?: { [key: string]: string; };
  /**
   * The project this node belongs to.
   * @type {string}
   * @memberof Plant
   */
  projectId: string;
  /**
   * A distinguishable name for the plant.
   * @type {string}
   * @memberof Plant
   */
  name: string;
  /**
   * 
   * @type {LocationPolygon}
   * @memberof Plant
   */
  location?: LocationPolygon;
  /**
   * A description of the plant
   * @type {string}
   * @memberof Plant
   */
  description?: string;
  /**
   * An array of tags. Alphanumeric characters only.
   * @type {Array<string>}
   * @memberof Plant
   */
  tags?: Array<string>;
}

export interface AssetType {
  /**
   * The unique identifier for the resource. It can be provided at creation, otherwise it will be generated by the api.
   * @type {string}
   * @memberof AssetType
   */
  uuid?: string;
  /**
   * The date (and time) at which the resource was created.
   * @type {Date}
   * @memberof AssetType
   */
  createdAt?: Date;
  /**
   * The date (and time) at which the resource was updated last time.
   * @type {Date}
   * @memberof AssetType
   */
  updatedAt?: Date;
  /**
   * A map of strings with custom content
   * @type {{ [key: string]: string; }}
   * @memberof AssetType
   */
  metadata?: { [key: string]: string; };
  /**
   * The project this node belongs to.
   * @type {string}
   * @memberof AssetType
   */
  projectId: string;
  /**
   * A distinguishable name for the asset type.
   * @type {string}
   * @memberof AssetType
   */
  name: string;
  /**
   * Name of the asset manufacturer.
   * @type {string}
   * @memberof AssetType
   */
  manufacturer?: string;
  /**
   * A description of the asset type
   * @type {string}
   * @memberof AssetType
   */
  description?: string;
  /**
   * The broad category of device, like Dish Washer, Hair Drier etc..
   * @type {string}
   * @memberof AssetType
   */
  category?: string;
}

export const DeviceTypePropertyTypeEnum = {
  Boolean: 'boolean',
  Number: 'number',
  Integer: 'integer',
  Double: 'double',
  String: 'string'
} as const
export type DeviceTypePropertyTypeEnum = typeof DeviceTypePropertyTypeEnum[keyof typeof DeviceTypePropertyTypeEnum];

export interface DeviceTypeProperty {
  /**
   * Unit of measurement
   * @type {string}
   * @memberof DeviceTypeProperty
   */
  uom: string;
  /**
   * A description of the property
   * @type {string}
   * @memberof DeviceTypeProperty
   */
  description?: string;
  /**
   * A label for the property
   * @type {string}
   * @memberof DeviceTypeProperty
   */
  displayName: string;
  /**
   * A type for the values of this property
   * @type {string}
   * @memberof DeviceTypeProperty
   */
  type: DeviceTypePropertyTypeEnum;
  /**
   * Defines which kind of aggregations should be done on the raw data corresponding to this property.
   * @type {Array<string>}
   * @memberof DeviceTypeProperty
   */
  aggregations: Array<string>;
}

export interface DeviceType {
  /**
   * The unique identifier for the resource. It can be provided at creation, otherwise it will be generated by the api.
   * @type {string}
   * @memberof DeviceType
   */
  uuid?: string;
  /**
   * The date (and time) at which the resource was created.
   * @type {Date}
   * @memberof DeviceType
   */
  createdAt?: Date;
  /**
   * The date (and time) at which the resource was updated last time.
   * @type {Date}
   * @memberof DeviceType
   */
  updatedAt?: Date;
  /**
   * A map of strings with custom content
   * @type {{ [key: string]: string; }}
   * @memberof DeviceType
   */
  metadata?: { [key: string]: string; };
  /**
   * A distinguishable name for the device type.
   * @type {string}
   * @memberof DeviceType
   */
  name: string;
  /**
   * Name of the device manufacturer.
   * @type {string}
   * @memberof DeviceType
   */
  manufacturer?: string;
  /**
   * Name of the device model.
   * @type {string}
   * @memberof DeviceType
   */
  model?: string;
  /**
   * A description of the device type
   * @type {string}
   * @memberof DeviceType
   */
  description?: string;
  /**
   * The broad category of device, like Energy Meter, Inverter etc..
   * @type {string}
   * @memberof DeviceType
   */
  category?: string;
  /**
   * 
   * @type {{ [key: string]: DeviceTypeProperty; }}
   * @memberof DeviceType
   */
  properties?: { [key: string]: DeviceTypeProperty; };
  /**
   * Name of an encoder function.
   * @type {string}
   * @memberof DeviceType
   */
  encoder?: string;
  /**
   * Name of a decoder function.
   * @type {string}
   * @memberof DeviceType
   */
  decoder?: string;
  /**
   * Array of possible firmware versions
   * @type {Array<any>}
   * @memberof DeviceType
   */
  firmwareVersions?: Array<unknown>;
}

export interface NodeType {
  /**
   * The unique identifier for the resource. It can be provided at creation, otherwise it will be generated by the api.
   * @type {string}
   * @memberof NodeType
   */
  uuid?: string;
  /**
   * The date (and time) at which the resource was created.
   * @type {Date}
   * @memberof NodeType
   */
  createdAt?: Date;
  /**
   * The date (and time) at which the resource was updated last time.
   * @type {Date}
   * @memberof NodeType
   */
  updatedAt?: Date;
  /**
   * A map of strings with custom content
   * @type {{ [key: string]: string; }}
   * @memberof NodeType
   */
  metadata?: { [key: string]: string; };
  /**
   * A distinguishable name for the node type.
   * @type {string}
   * @memberof NodeType
   */
  name: string;
  /**
   * Name of the manufacturer.
   * @type {string}
   * @memberof NodeType
   */
  manufacturer?: string;
  /**
   * Name of the model.
   * @type {string}
   * @memberof NodeType
   */
  model?: string;
  /**
   * A description of the node type
   * @type {string}
   * @memberof NodeType
   */
  description?: string;
  /**
   * Name of an encoder function.
   * @type {string}
   * @memberof NodeType
   */
  encoder?: string;
  /**
   * Name of a decoder function.
   * @type {string}
   * @memberof NodeType
   */
  decoder?: string;
  /**
   * Array of possible firmware versions
   * @type {Array<any>}
   * @memberof NodeType
   */
  firmwareVersions?: Array<unknown>;
}
